on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id not in (31,53,30,39,1,2,3,20)
union all
select distinct  dm1.*, 'Dev_measurement'stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id =  30
union all
select distinct  dm1.*, 'Dev_condition'stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id =  31
union all
select distinct  dm1.*, 'Dev_visit_detail'stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id =  53
union all
select distinct  dm1.*, 'Dev_condition'stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id =  54
union all
select distinct dm1.*, 'Dev_note' as stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id = 20)v
where stratum1 = 'Dev_visit_detail'
group by category,stratum1
order by category, stratum1;"
metaVisitPiePlot <- DatabaseConnector::dbGetQuery(connection,sql)
sql <- "select
category
,sub_category as stratum1
,count(*) as count_val
from
(select dm1.*, dr1.stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id not in (31,53,30,39,1,2,3,20)
union all
select distinct  dm1.*, 'Dev_measurement'stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id =  30
union all
select distinct  dm1.*, 'Dev_condition'stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id =  31
union all
select distinct  dm1.*, 'Dev_visit_detail'stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id =  53
union all
select distinct  dm1.*, 'Dev_condition'stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id =  54
union all
select distinct dm1.*, 'Dev_note' as stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id = 20)v
where stratum1 = 'Dev_visit_detail'
group by category,sub_category
order by category, sub_category;"
metaVisitHist <- DatabaseConnector::dbGetQuery(connection,sql)
sql <- "
select
rule_id
,category
,sub_category
,dq_msg
,count_val
,check_id
from
(select dm1.*, dr1.stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id not in (31,53,30,39,1,2,3,20)
union all
select distinct  dm1.*, 'Dev_measurement'stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id =  30
union all
select distinct  dm1.*, 'Dev_condition'stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id =  31
union all
select distinct  dm1.*, 'Dev_visit_detail'stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id =  53
union all
select distinct  dm1.*, 'Dev_condition'stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id =  54
union all
select distinct dm1.*, 'Dev_note' as stratum1 from DQUEEN_Result.dbo.dq_result_summary_main as dm1
left join (select distinct  check_id, stratum1 from DQUEEN_Result.dbo.dq_result
where count_val > 0) as dr1
on dm1.check_id = dr1.check_id
where dm1.count_val > 0 and dm1.rule_id = 20)v
where stratum1 = 'Dev_visit_detail'
"
metaVisitMessageBox <- DatabaseConnector::dbGetQuery(connection,sql)
sql <- "select * from DQUEEN_Result.dbo.data_15"
cdmPersonPiePlot <- DatabaseConnector::dbGetQuery(connection,sql)
sql <- "select * from DQUEEN_Result.dbo.data_16"
cdmPersonHist <- DatabaseConnector::dbGetQuery(connection,sql)
sql <- "select
category
--,SUBCATEGORY
,count(*) as count_val
from DQUEEN_Result.dbo.dqdashboard_results
where FAILED = 1 and CDM_TABLE_NAME like 'VISIT%'
group by CATEGORY
"
cdmVisitPiePlot <- DatabaseConnector::dbGetQuery(connection,sql)
sql <- "select
category
,SUBCATEGORY as stratum1
,count(*) as count_val
from DQUEEN_Result.dbo.dqdashboard_results
where FAILED = 1 and CDM_TABLE_NAME like 'VISIT%'
group by CATEGORY,SUBCATEGORY"
cdmVisitHist <- DatabaseConnector::dbGetQuery(connection,sql)
sql <- "
select * from
(select
CATEGORY
,SUBCATEGORY
,CHECK_DESCRIPTION
,CDM_TABLE_NAME
,CDM_FIELD_NAME
,count(*) as count_val
from DQUEEN_Result.dbo.dqdashboard_results
where FAILED = 1 and CDM_TABLE_NAME = 'PERSON'
group by CATEGORY,SUBCATEGORY,CHECK_DESCRIPTION,CDM_TABLE_NAME,CDM_FIELD_NAME)v
order by newid();
"
cdmPersonMessageBox <- DatabaseConnector::dbGetQuery(connection,sql)
sql <- "
select * from
(select
CATEGORY
,SUBCATEGORY
,CHECK_DESCRIPTION
,CDM_TABLE_NAME
,CDM_FIELD_NAME
,count(*) as count_val
from DQUEEN_Result.dbo.dqdashboard_results
where FAILED = 1 and CDM_TABLE_NAME like 'VISIT%'
group by CATEGORY,SUBCATEGORY,CHECK_DESCRIPTION,CDM_TABLE_NAME,CDM_FIELD_NAME)v
order by newid();
"
cdmVisitMessageBox <- DatabaseConnector::dbGetQuery(connection,sql)
query <- "select
yc1.TABLE_NAME
,yc1.count_year
,yc1.count_val
,yc2.visit_count
from
(select
stratum1 as TABLE_NAME
,stratum2 as count_year
,count_val
from DQUEEN_Result.dbo.dq_result where check_id = 72 and stratum4 = 'none') as yc1
left join
(select stratum2 as visit_yy, count_val as visit_count
from DQUEEN_Result.dbo.dq_result
where check_id = 72 and stratum1 = 'visit_detail'
and (stratum2 > 1993 and stratum2 < 2018) ) as yc2
on yc1.count_year = yc2.visit_yy"
cdmVisitPerson <- DatabaseConnector::dbGetQuery(connection,query)
query <- "select
stratum1 as TABLE_NAME
,case
when stratum2 = 9203 then 'Emergency Room Visit'
when stratum2 = 9202 then 'Outpatient Visit'
ELSE 'Inpatient Visit'
END as visit_type
,stratum3 as count_year
,cast(count_val as bigint) as count_val
from DQUEEN_Result.dbo.dq_result where check_id = 73 and (stratum3 > 1993 or stratum3 <2018) and stratum4 is not null
union all
select
distinct
'Dev_visit' as TABLE_NAME
,stratum2+'_visit' as visit_type
,stratum3 as count_year
,cast(stratum4 as bigint)as count_val
from DQUEEN_Result.dbo.dq_result where check_id = 73 and (stratum3 > 1993 or stratum3 <2018) and stratum4 is not null order by visit_type,count_year"
cdmVisitType  <- DatabaseConnector::dbGetQuery(connection,query)
query <- "select * from DQUEEN_Result.dbo.data_17"
cdmPatientClassification <- DatabaseConnector::dbGetQuery(connection,query)
cdmPatientClassification <- reshape2::melt(cdmPatientClassification)
cdmPatientClassification <- reshape::cast(data = cdmPatientClassification,SEX ~ exclude_gb)
rownames(cdmPatientClassification) <- cdmPatientClassification$SEX
cdmPatientClassification <- cdmPatientClassification[-1]
query <- "
select
*
from
DQUEEN_Result.dbo.data_18
order by YY
"
cdmPersonBirth <- DatabaseConnector::dbGetQuery(connection,query)
rownames(cdmPersonBirth) <- cdmPersonBirth$'yy'
cdmPersonBirth <- cdmPersonBirth[-1]
query <- "
select rm1.*,r2.col_count,r3.uniq_count,r4.missing_count,r5.special_char_count from
(select
m1.TABLE_NAME
,r1.col
,m1.rows
,r1.dist_count
from (select TABLE_NAME, rows from DQUEEN_Result.dbo.schema_capacity
where stage_gb = 'C' and TABLE_NAME = 'person') as m1
inner join
(select
stratum1 as tbnm
,stratum2 as col
,count_val as dist_count
from DQUEEN_Result.dbo.dq_result
where check_id = 74 and stratum1 = 'person') as r1
on m1.TABLE_NAME = r1.tbnm) as rm1
left join
(select
stratum1 as tbnm
,stratum2 as col
,count_val as col_count
from DQUEEN_Result.dbo.dq_result
where check_id = 75 and stratum1 = 'person') as r2
on rm1.TABLE_NAME = r2.tbnm and rm1.col = r2.col
left join
(select
stratum1 as tbnm
,stratum2 as col
,count_val as uniq_count
from DQUEEN_Result.dbo.dq_result
where check_id = 76 and stratum1 = 'person') as r3
on rm1.TABLE_NAME = r3.tbnm and rm1.col = r3.col
left join
(select
stratum1 as tbnm
,stratum2 as col
,count_val as missing_count
from DQUEEN_Result.dbo.dq_result
where check_id = 77 and stratum1 = 'person') as r4
on rm1.TABLE_NAME = r4.tbnm and rm1.col = r4.col
left join
(select
stratum1 as tbnm
,stratum2 as col
,count_val as special_char_count
from DQUEEN_Result.dbo.dq_result
where check_id = 78 and stratum1 = 'person') as r5
on rm1.TABLE_NAME = r5.tbnm and rm1.col = r5.col
"
cdmPersonInfo <- DatabaseConnector::dbGetQuery(connection,query)
query <- "select
vy1.*
,vy2.p_10
,vy2.p_25
,vy2.median
from
(select
stratum1 as table_name
,stratum2 as visit_year
,count_val
from DQUEEN_Result.dbo.dq_result
where check_id = 72
and stratum1 = 'visit_detail'
and stratum4 = 'none' ) as vy1
left join
(select stratum1, stratum2, p_10,p_25, median from DQUEEN_Result.dbo.dq_result_statics where check_id = 72 and stratum1 = 'visit_detail') as vy2
on vy1.visit_year = vy2.stratum2"
cdmvisitValidation2 <- DatabaseConnector::dbGetQuery(connection,query)
cdmvisitValidation2$visit_year <- as.numeric(cdmvisitValidation2$visit_year)
cdmvisitValidation2$count_val <- as.numeric(cdmvisitValidation2$count_val)
cdmvisitValidation2$p_10 <- as.numeric(cdmvisitValidation2$p_10)
cdmvisitValidation2$p_25 <- as.numeric(cdmvisitValidation2$p_25)
cdmvisitValidation2$median <- as.numeric(cdmvisitValidation2$median)
query <- "select * from DQUEEN_Result.dbo.data_19"
visitValidation <- DatabaseConnector::dbGetQuery(connection,query)
query <- "select
stratum1 as tbnm
,case
when stratum2 = 9203 then 'Emergency Room Visit'
when stratum2 = 9202 then 'Outpatient Visit'
ELSE 'Inpatient Visit'
END as patfg
,stratum3 as visit_year
,count_val
,P_25
from DQUEEN_Result.dbo.dq_result_statics where check_id = 73 and stratum1 = 'visit_detail'"
cdmVisitData <- DatabaseConnector::dbGetQuery(connection,query)
query <- "select * from DQUEEN_Result.dbo.data_20"
cdmVisitLengthStatic <- DatabaseConnector::dbGetQuery(connection,query)
query<-'select * from DQUEEN_Result.dbo.data_21 order by patfg;'
cdmVisitLength <- DatabaseConnector::dbGetQuery(connection,query)
query<- "select * from DQUEEN_Result.dbo.data_22"
cdmDaliyVisitInfo <- DatabaseConnector::dbGetQuery(connection,query)
query<- "select * from DQUEEN_Result.dbo.data_23 order by patfg, daily_visit_cnt"
cdmDaliyVisitType <- DatabaseConnector::dbGetQuery(connection,query)
query<- "select rm1.*,r2.col_count,r3.uniq_count,r4.missing_count,r5.special_char_count from
(select
m1.TABLE_NAME
,r1.col
,m1.rows
,r1.dist_count
from (select TABLE_NAME, rows from DQUEEN_Result.dbo.schema_capacity
where stage_gb = 'C' and TABLE_NAME = 'visit_detail') as m1
inner join
(select
stratum1 as tbnm
,stratum2 as col
,count_val as dist_count
from DQUEEN_Result.dbo.dq_result
where check_id = 74 and stratum1 = 'visit_detail') as r1
on m1.TABLE_NAME = r1.tbnm) as rm1
left join
(select
stratum1 as tbnm
,stratum2 as col
,count_val as col_count
from DQUEEN_Result.dbo.dq_result
where check_id = 75 and stratum1 = 'visit_detail') as r2
on rm1.TABLE_NAME = r2.tbnm and rm1.col = r2.col
left join
(select
stratum1 as tbnm
,stratum2 as col
,count_val as uniq_count
from DQUEEN_Result.dbo.dq_result
where check_id = 76 and stratum1 = 'visit_detail') as r3
on rm1.TABLE_NAME = r3.tbnm and rm1.col = r3.col
left join
(select
stratum1 as tbnm
,stratum2 as col
,count_val as missing_count
from DQUEEN_Result.dbo.dq_result
where check_id = 77 and stratum1 = 'visit_detail') as r4
on rm1.TABLE_NAME = r4.tbnm and rm1.col = r4.col
left join
(select
stratum1 as tbnm
,stratum2 as col
,count_val as special_char_count
from DQUEEN_Result.dbo.dq_result
where check_id = 78 and stratum1 = 'visit_detail') as r5
on rm1.TABLE_NAME = r5.tbnm and rm1.col = r5.col"
cdmVisitInfo <- DatabaseConnector::dbGetQuery(connection,query)
DatabaseConnector::disconnect(connection = connection)
rm(connection)
rm(ConnectionDetails)
rm(threshold)
#Save RDS (if you have your DB Result)
resultPath <- file.path(getwd(),'data')
for(i in 1:length(ls())){
saveRDS(get(ls()[i]),paste0(resultPath,'/',ls()[i],'.RDS'))
}
runApp('inst/shinyApp')
if (!require('shiny')){install.packages('shiny'); library(shiny)}
if (!require('shinyjs')){install.packages('shinyjs'); library(shinyjs)}
if (!require('highcharter')){install.packages('highcharter'); library(highcharter)}
if (!require('treemap')){install.packages('treemap'); library(treemap)}
if (!require('DT')){install.packages('DT'); library(DT)}
if (!require('xts')){install.packages('xts'); library(xts)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('dygraphs')){install.packages('dygraphs'); library(dygraphs)}
if (!require('lubridate')){install.packages('lubridate'); library(lubridate)}
if (!require('plotly')){install.packages('plotly'); library(plotly)}
if (!require('ECharts2Shiny')){install.packages('ECharts2Shiny'); library(ECharts2Shiny)}
if (!require('shinythemes')){install.packages('shinythemes'); library(shinythemes)}
if (!require('visNetwork')){install.packages('visNetwork'); library(visNetwork)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('ggplot2')){install.packages('ggplot2'); library(ggplot2)}
if (!require('ggiraph')){install.packages('ggiraph'); library(ggiraph)}
if (!require('reshape')){install.packages('reshape'); library(reshape)}
if (!require('reshape2')){install.packages('reshape2'); library(reshape2)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('shinyBS')){install.packages('shinyBS'); library(shinyBS)}
runApp(appDir = file.path(getwd(),'inst/shinyApp'))
if (!require('shiny')){install.packages('shiny'); library(shiny)}
if (!require('shinyjs')){install.packages('shinyjs'); library(shinyjs)}
if (!require('highcharter')){install.packages('highcharter'); library(highcharter)}
if (!require('treemap')){install.packages('treemap'); library(treemap)}
if (!require('DT')){install.packages('DT'); library(DT)}
if (!require('xts')){install.packages('xts'); library(xts)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('dygraphs')){install.packages('dygraphs'); library(dygraphs)}
if (!require('lubridate')){install.packages('lubridate'); library(lubridate)}
if (!require('plotly')){install.packages('plotly'); library(plotly)}
if (!require('ECharts2Shiny')){install.packages('ECharts2Shiny'); library(ECharts2Shiny)}
if (!require('shinythemes')){install.packages('shinythemes'); library(shinythemes)}
if (!require('visNetwork')){install.packages('visNetwork'); library(visNetwork)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('ggplot2')){install.packages('ggplot2'); library(ggplot2)}
if (!require('ggiraph')){install.packages('ggiraph'); library(ggiraph)}
if (!require('reshape')){install.packages('reshape'); library(reshape)}
if (!require('reshape2')){install.packages('reshape2'); library(reshape2)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('shinyBS')){install.packages('shinyBS'); library(shinyBS)}
runApp(appDir = file.path(getwd(),'inst/shinyApp'))
if (!require('shiny')){install.packages('shiny'); library(shiny)}
if (!require('shinyjs')){install.packages('shinyjs'); library(shinyjs)}
if (!require('highcharter')){install.packages('highcharter'); library(highcharter)}
if (!require('treemap')){install.packages('treemap'); library(treemap)}
if (!require('DT')){install.packages('DT'); library(DT)}
if (!require('xts')){install.packages('xts'); library(xts)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('dygraphs')){install.packages('dygraphs'); library(dygraphs)}
if (!require('lubridate')){install.packages('lubridate'); library(lubridate)}
if (!require('plotly')){install.packages('plotly'); library(plotly)}
if (!require('ECharts2Shiny')){install.packages('ECharts2Shiny'); library(ECharts2Shiny)}
if (!require('shinythemes')){install.packages('shinythemes'); library(shinythemes)}
if (!require('visNetwork')){install.packages('visNetwork'); library(visNetwork)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('ggplot2')){install.packages('ggplot2'); library(ggplot2)}
if (!require('ggiraph')){install.packages('ggiraph'); library(ggiraph)}
if (!require('reshape')){install.packages('reshape'); library(reshape)}
if (!require('reshape2')){install.packages('reshape2'); library(reshape2)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('shinyBS')){install.packages('shinyBS'); library(shinyBS)}
runApp(appDir = file.path(getwd(),'inst/shinyApp'))
if (!require('shiny')){install.packages('shiny'); library(shiny)}
if (!require('shinyjs')){install.packages('shinyjs'); library(shinyjs)}
if (!require('highcharter')){install.packages('highcharter'); library(highcharter)}
if (!require('treemap')){install.packages('treemap'); library(treemap)}
if (!require('DT')){install.packages('DT'); library(DT)}
if (!require('xts')){install.packages('xts'); library(xts)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('dygraphs')){install.packages('dygraphs'); library(dygraphs)}
if (!require('lubridate')){install.packages('lubridate'); library(lubridate)}
if (!require('plotly')){install.packages('plotly'); library(plotly)}
if (!require('ECharts2Shiny')){install.packages('ECharts2Shiny'); library(ECharts2Shiny)}
if (!require('shinythemes')){install.packages('shinythemes'); library(shinythemes)}
if (!require('visNetwork')){install.packages('visNetwork'); library(visNetwork)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('ggplot2')){install.packages('ggplot2'); library(ggplot2)}
if (!require('ggiraph')){install.packages('ggiraph'); library(ggiraph)}
if (!require('reshape')){install.packages('reshape'); library(reshape)}
if (!require('reshape2')){install.packages('reshape2'); library(reshape2)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('shinyBS')){install.packages('shinyBS'); library(shinyBS)}
runApp(appDir = file.path(getwd(),'inst/shinyApp'))
if (!require('shiny')){install.packages('shiny'); library(shiny)}
if (!require('shinyjs')){install.packages('shinyjs'); library(shinyjs)}
if (!require('highcharter')){install.packages('highcharter'); library(highcharter)}
if (!require('treemap')){install.packages('treemap'); library(treemap)}
if (!require('DT')){install.packages('DT'); library(DT)}
if (!require('xts')){install.packages('xts'); library(xts)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('dygraphs')){install.packages('dygraphs'); library(dygraphs)}
if (!require('lubridate')){install.packages('lubridate'); library(lubridate)}
if (!require('plotly')){install.packages('plotly'); library(plotly)}
if (!require('ECharts2Shiny')){install.packages('ECharts2Shiny'); library(ECharts2Shiny)}
if (!require('shinythemes')){install.packages('shinythemes'); library(shinythemes)}
if (!require('visNetwork')){install.packages('visNetwork'); library(visNetwork)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('ggplot2')){install.packages('ggplot2'); library(ggplot2)}
if (!require('ggiraph')){install.packages('ggiraph'); library(ggiraph)}
if (!require('reshape')){install.packages('reshape'); library(reshape)}
if (!require('reshape2')){install.packages('reshape2'); library(reshape2)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('shinyBS')){install.packages('shinyBS'); library(shinyBS)}
runApp(appDir = file.path(getwd(),'inst/shinyApp'))
if (!require('shiny')){install.packages('shiny'); library(shiny)}
if (!require('shinyjs')){install.packages('shinyjs'); library(shinyjs)}
if (!require('highcharter')){install.packages('highcharter'); library(highcharter)}
if (!require('treemap')){install.packages('treemap'); library(treemap)}
if (!require('DT')){install.packages('DT'); library(DT)}
if (!require('xts')){install.packages('xts'); library(xts)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('dygraphs')){install.packages('dygraphs'); library(dygraphs)}
if (!require('lubridate')){install.packages('lubridate'); library(lubridate)}
if (!require('plotly')){install.packages('plotly'); library(plotly)}
if (!require('ECharts2Shiny')){install.packages('ECharts2Shiny'); library(ECharts2Shiny)}
if (!require('shinythemes')){install.packages('shinythemes'); library(shinythemes)}
if (!require('visNetwork')){install.packages('visNetwork'); library(visNetwork)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('ggplot2')){install.packages('ggplot2'); library(ggplot2)}
if (!require('ggiraph')){install.packages('ggiraph'); library(ggiraph)}
if (!require('reshape')){install.packages('reshape'); library(reshape)}
if (!require('reshape2')){install.packages('reshape2'); library(reshape2)}
if (!require('dplyr')){install.packages('dplyr'); library(dplyr)}
if (!require('shinyBS')){install.packages('shinyBS'); library(shinyBS)}
runApp(appDir = file.path(getwd(),'inst/shinyApp'))
